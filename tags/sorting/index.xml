<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sorting on Ahmedur Rahman Shovon</title><link>https://arshovon.com/tags/sorting/</link><description>Recent content in Sorting on Ahmedur Rahman Shovon</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 23 Sep 2025 14:30:07 -0500</lastBuildDate><atom:link href="https://arshovon.com/tags/sorting/index.xml" rel="self" type="application/rss+xml"/><item><title>Sorting a list (Python 3)</title><link>https://arshovon.com/blog/sorting-a-list-python3/</link><pubDate>Sun, 16 Jan 2022 07:01:32 -0600</pubDate><guid>https://arshovon.com/blog/sorting-a-list-python3/</guid><description>&lt;p&gt;There are a lot of &lt;a href="https://arshovon.com/blog/sorting-algorithm-comparisons/"&gt;sorting algorithms&lt;/a&gt;
such as &lt;a href="https://arshovon.com/blog/bubble-sort/"&gt;Bubble sort&lt;/a&gt;,
&lt;a href="https://arshovon.com/blog/insertion-sort/"&gt;Insertion sort&lt;/a&gt;,
&lt;a href="https://arshovon.com/blog/merge-sort/"&gt;Merge sort&lt;/a&gt;, &lt;a href="https://arshovon.com/blog/counting-sort/"&gt;Counting sort&lt;/a&gt;, etc.
But most of the time, we use builtin sorting function to sort an iterable (e.g.
list, tuple, dictionary, custom class with iterator etc.).&lt;/p&gt;
&lt;p&gt;Today we will sort a given list of strings in several ways to understand
the &lt;a href="https://docs.python.org/3/library/functions.html#sorted"&gt;Python 3 built-in sorted function&lt;/a&gt;
.&lt;/p&gt;
&lt;h3 id="dataset"&gt;Dataset&lt;/h3&gt;
&lt;p&gt;We will use &lt;a href="https://en.wikipedia.org/wiki/U.S._state"&gt;the 50 U.S. states&lt;/a&gt; as
our dataset.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;states &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Alabama&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Alaska&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Arizona&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Arkansas&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;California&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Colorado&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Connecticut&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Delaware&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Florida&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Georgia&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Hawaii&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Idaho&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Illinois&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Indiana&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Iowa&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Kansas&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Kentucky&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Louisiana&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Maine&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Maryland&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Massachusetts&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Michigan&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Minnesota&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Mississippi&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Missouri&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Montana&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Nebraska&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Nevada&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;New Hampshire&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;New Jersey&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;New Mexico&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;New York&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;North Carolina&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;North Dakota&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Ohio&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Oklahoma&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Oregon&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Pennsylvania&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Rhode Island&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;South Carolina&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;South Dakota&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Tennessee&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Texas&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Utah&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Vermont&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Virginia&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Washington&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;West Virginia&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Wisconsin&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Wyoming&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="sorting-techniques"&gt;Sorting Techniques&lt;/h2&gt;
&lt;p&gt;Now we will sort the above &lt;code&gt;states&lt;/code&gt; list in different ways.&lt;/p&gt;</description></item><item><title>Merge Sort</title><link>https://arshovon.com/blog/merge-sort/</link><pubDate>Thu, 29 Apr 2021 01:00:15 +0600</pubDate><guid>https://arshovon.com/blog/merge-sort/</guid><description>&lt;h2 id="divide-and-conquer-strategy-and-merge-sort"&gt;Divide and conquer strategy and merge sort&lt;/h2&gt;
&lt;p&gt;In a divide and conquer strategy, a problem is divided into multiple subproblems.
These subproblems are similar to the original problem but smaller in size.
The divide and conquer strategy solves these subproblems recursively.
Then it combines the solutions of the subproblems to develop a final solution for the original problem.
Thus, the divide and conquer strategy has two parts: divide and conquer.&lt;/p&gt;</description></item><item><title>Bubble Sort</title><link>https://arshovon.com/blog/bubble-sort/</link><pubDate>Wed, 28 Apr 2021 03:03:14 +0600</pubDate><guid>https://arshovon.com/blog/bubble-sort/</guid><description>&lt;p&gt;In the bubble sort algorithm, each pair of consecutive elements are swapped if they are not in the correct order. In each iteration, it places an element at its right place. Thus in &lt;code&gt;n&lt;/code&gt; iterations, all &lt;code&gt;n&lt;/code&gt; elements are sorted accordingly.&lt;/p&gt;
&lt;h2 id="bubble-sort-characteristics"&gt;Bubble sort characteristics&lt;/h2&gt;
&lt;h3 id="impractical"&gt;Impractical&lt;/h3&gt;
&lt;p&gt;Bubble sort is one of the fundamental sorting algorithms to learn how sorting works. It is not a practical sorting algorithm for its poor performance. Though bubble sort has the same time complexity as insertion sort, insertion sort is more efficient than bubble sort.&lt;/p&gt;</description></item><item><title>Sorting Algorithm Comparisons</title><link>https://arshovon.com/blog/sorting-algorithm-comparisons/</link><pubDate>Sat, 15 Aug 2020 02:06:33 +0600</pubDate><guid>https://arshovon.com/blog/sorting-algorithm-comparisons/</guid><description>&lt;h3 id="sorting-algorithm-comparisons-table"&gt;Sorting Algorithm Comparisons Table&lt;/h3&gt;
&lt;table class="table table-bordered table-striped table-hover table-responsive"&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Criteria&lt;/th&gt;
 &lt;th&gt;&lt;a href="https://arshovon.com/blog/bubble-sort/"&gt;Bubble&lt;/a&gt;&lt;/th&gt;
 &lt;th&gt;Selection&lt;/th&gt;
 &lt;th&gt;&lt;a href="https://arshovon.com/blog/insertion-sort/"&gt;Insertion&lt;/a&gt;&lt;/th&gt;
 &lt;th&gt;&lt;a href="https://arshovon.com/blog/merge-sort/"&gt;Merge&lt;/a&gt;&lt;/th&gt;
 &lt;th&gt;Quick&lt;/th&gt;
 &lt;th&gt;&lt;a href="https://arshovon.com/blog/counting-sort/"&gt;Counting&lt;/a&gt;&lt;/th&gt;
 &lt;th&gt;Timsort&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Technique&lt;/td&gt;
 &lt;td&gt;Brute force&lt;/td&gt;
 &lt;td&gt;Brute force&lt;/td&gt;
 &lt;td&gt;Brute force&lt;/td&gt;
 &lt;td&gt;Divide-and-conquer&lt;/td&gt;
 &lt;td&gt;Divide-and-conquer&lt;/td&gt;
 &lt;td&gt;Non comparison&lt;/td&gt;
 &lt;td&gt;Hybrid&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Worst Time&lt;/td&gt;
 &lt;td&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
 &lt;td&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
 &lt;td&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
 &lt;td&gt;O(nlgn)&lt;/td&gt;
 &lt;td&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
 &lt;td&gt;O(k+n)&lt;/td&gt;
 &lt;td&gt;O(nlgn)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Average Time&lt;/td&gt;
 &lt;td&gt;Θ(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
 &lt;td&gt;Θ(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
 &lt;td&gt;Θ(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
 &lt;td&gt;Θ(nlgn)&lt;/td&gt;
 &lt;td&gt;Θ(nlgn)&lt;/td&gt;
 &lt;td&gt;Θ(k+n)&lt;/td&gt;
 &lt;td&gt;Θ(nlgn)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Best Time&lt;/td&gt;
 &lt;td&gt;Ω(n)&lt;/td&gt;
 &lt;td&gt;Ω(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
 &lt;td&gt;Ω(n)&lt;/td&gt;
 &lt;td&gt;Ω(nlgn)&lt;/td&gt;
 &lt;td&gt;Ω(nlgn)&lt;/td&gt;
 &lt;td&gt;Ω(k+n)&lt;/td&gt;
 &lt;td&gt;Ω(n)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Space&lt;/td&gt;
 &lt;td&gt;O(1)&lt;/td&gt;
 &lt;td&gt;O(1)&lt;/td&gt;
 &lt;td&gt;O(1)&lt;/td&gt;
 &lt;td&gt;O(n)&lt;/td&gt;
 &lt;td&gt;O(n)&lt;/td&gt;
 &lt;td&gt;O(k+n)&lt;/td&gt;
 &lt;td&gt;O(n)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Stable&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;In-place&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Online&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Adaptive&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;td&gt;No&lt;/td&gt;
 &lt;td&gt;Yes&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Suitable for&lt;/td&gt;
 &lt;td&gt;Sorted list&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;Almost sorted list&lt;/td&gt;
 &lt;td&gt;List with unknown order&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;0&amp;lt;=A[i]&amp;lt;=k&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="criteria-explanation"&gt;Criteria Explanation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technique&lt;/strong&gt;: Methodology of the sorting algorithm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Worst Time&lt;/strong&gt;: Worst time complexity (Big-O) of the algorithm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Average Time&lt;/strong&gt;: Average time complexity (Big-Theta) of the algorithm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Best Time&lt;/strong&gt;: Best time complexity (Big-Omega) of the algorithm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Space&lt;/strong&gt;: Space complexity of the algorithm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stable&lt;/strong&gt;: Stable algorithm maintains the relative order of input elements with equal values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In-place&lt;/strong&gt;: In-place algorithm does not use auxiliary data structure to transform the input elements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Online&lt;/strong&gt;: Online algorithm does not require the entire input available from the start.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adaptive&lt;/strong&gt;: Adaptive algorithm takes the advantages of presorted array elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mitpress.mit.edu/books/introduction-algorithms-third-edition"&gt;Introduction to algorithms by Cormen, Thomas H and Leiserson, Charles E and Rivest, Ronald L and Stein, Clifford&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arshovon.com/blog/bubble-sort/"&gt;Bubble sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arshovon.com/blog/insertion-sort/"&gt;Insertion sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arshovon.com/blog/merge-sort/"&gt;Merge sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arshovon.com/blog/counting-sort/"&gt;Counting sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Sorting_algorithm"&gt;Sorting Algorithm - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Timsort"&gt;Timsort - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.c2.com/?TimSort"&gt;Timsort - C2 article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/analysis-of-different-sorting-techniques/"&gt;Analysis of different sorting techniques - Geeksforgeeks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Insertion Sort</title><link>https://arshovon.com/blog/insertion-sort/</link><pubDate>Tue, 11 Aug 2020 02:06:33 +0600</pubDate><guid>https://arshovon.com/blog/insertion-sort/</guid><description>&lt;h2 id="characteristics"&gt;Characteristics&lt;/h2&gt;
&lt;h3 id="simple-implementation"&gt;Simple implementation&lt;/h3&gt;
&lt;p&gt;Insertion sort can be implemented easily with less lines of code. It is quite efficient for small data sets. Though it has same complexity than other quadratic sorting algorithms like selection sort or bubble sort, insertion sort is more efficient.&lt;/p&gt;
&lt;h3 id="adaptive"&gt;Adaptive&lt;/h3&gt;
&lt;p&gt;Insertion sort is adaptive. If the input data set is already sorted, the number of steps are reduced.&lt;/p&gt;
&lt;h3 id="online"&gt;Online&lt;/h3&gt;
&lt;p&gt;Insertion sort works on the data as it receives it. The dataset is always sorted in each step of the insertion sort. A practical example of insertion sort is sorting a hand of playing cards. Assume, at the beginning of a card game, we have no cards in the left hand. Then we take a face down card from the table and search for it&amp;rsquo;s position in the left hand. To find the correct position for a card we compare the newly drawn card with each of the cards in the left hand from left to right. Then when we find the suitable spot, we insert the card into it&amp;rsquo;s correct position. At any times, the cards in the left hand are sorted.&lt;/p&gt;</description></item><item><title>Counting Sort</title><link>https://arshovon.com/blog/counting-sort/</link><pubDate>Sun, 09 Aug 2020 11:07:32 +0600</pubDate><guid>https://arshovon.com/blog/counting-sort/</guid><description>&lt;h2 id="characteristics"&gt;Characteristics&lt;/h2&gt;
&lt;h3 id="non-negative-integers-with-a-known-maximum-value"&gt;Non negative integers with a known maximum value&lt;/h3&gt;
&lt;p&gt;Counting sort can be applied if the input numbers are in the set &lt;code&gt;{0, 1, .. ,k}&lt;/code&gt;, a set of non negative integers with a maximum value &lt;code&gt;k&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="no-comparisons-between-elements"&gt;No comparisons between elements&lt;/h3&gt;
&lt;p&gt;There are no comparisons between input elements that take place in counting sort. It uses array indexing to determine the relative order of the input numbers. It identifies the relative positions of each input element. For each element &lt;code&gt;x&lt;/code&gt;, counting sort counts number of elements less than &lt;code&gt;x&lt;/code&gt;. Then it uses this information to place element &lt;code&gt;x&lt;/code&gt; directly into its correct position.&lt;/p&gt;</description></item></channel></rss>