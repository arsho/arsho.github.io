<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithm on Ahmedur Rahman Shovon</title><link>https://arshovon.com/tags/algorithm/</link><description>Recent content in algorithm on Ahmedur Rahman Shovon</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 24 Aug 2021 09:23:37 -0500</lastBuildDate><atom:link href="https://arshovon.com/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>Get the majority element from a given list</title><link>https://arshovon.com/blog/majority-element/</link><pubDate>Tue, 24 Aug 2021 09:23:37 -0500</pubDate><guid>https://arshovon.com/blog/majority-element/</guid><description>Given an array numbers of size n, return the majority element.
Description The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Examples Example 1: Input: nums = [1, 2, 2] Output: 2 Example 2: Input: nums = [1, 2, 2, 2, 2, 1, 1] Output: 2 Solution Approach 1 - Hash Table We can use a hash table to store the number of occurrences of each number.</description></item><item><title>Merge Sort</title><link>https://arshovon.com/blog/merge-sort/</link><pubDate>Thu, 29 Apr 2021 01:00:15 +0600</pubDate><guid>https://arshovon.com/blog/merge-sort/</guid><description>Divide and conquer strategy and merge sort In a divide and conquer strategy, a problem is divided into multiple subproblems. These subproblems are similar to the original problem but smaller in size. The divide and conquer strategy solves these subproblems recursively. Then it combines the solutions of the subproblems to develop a final solution for the original problem. Thus, the divide and conquer strategy has two parts: divide and conquer.</description></item><item><title>Bubble Sort</title><link>https://arshovon.com/blog/bubble-sort/</link><pubDate>Wed, 28 Apr 2021 03:03:14 +0600</pubDate><guid>https://arshovon.com/blog/bubble-sort/</guid><description>In the bubble sort algorithm, each pair of consecutive elements are swapped if they are not in the correct order. In each iteration, it places an element at its right place. Thus in n iterations, all n elements are sorted accordingly.
Bubble sort characteristics Impractical Bubble sort is one of the fundamental sorting algorithms to learn how sorting works. It is not a practical sorting algorithm for its poor performance. Though bubble sort has the same time complexity as insertion sort, insertion sort is more efficient than bubble sort.</description></item><item><title>Understanding Time Complexity</title><link>https://arshovon.com/blog/understanding-time-complexity/</link><pubDate>Wed, 14 Apr 2021 00:01:36 +0600</pubDate><guid>https://arshovon.com/blog/understanding-time-complexity/</guid><description>Algorithm efficiency The efficiency of an algorithm is mainly measured by time complexity and space complexity. Time complexity describes the computational time required to run an algorithm for a set of input elements. It is generally expressed as a function of the size of the input.
Asymptotic notations Three types of asymptotic notations are used to express both the time complexity and space complexity of an algorithm. We will compare these notations by three different scenarios of the same algorithm, the linear search algorithm.</description></item><item><title>Sorting Algorithm Comparisons</title><link>https://arshovon.com/blog/sorting-algorithm-comparisons/</link><pubDate>Sat, 15 Aug 2020 02:06:33 +0600</pubDate><guid>https://arshovon.com/blog/sorting-algorithm-comparisons/</guid><description>Sorting Algorithm Comparisons Table Criteria Bubble Selection Insertion Merge Quick Counting Timsort Technique Brute force Brute force Brute force Divide-and-conquer Divide-and-conquer Non comparison Hybrid Worst Time O(n2) O(n2) O(n2) O(nlgn) O(n2) O(k+n) O(nlgn) Average Time Θ(n2) Θ(n2) Θ(n2) Θ(nlgn) Θ(nlgn) Θ(k+n) Θ(nlgn) Best Time Ω(n) Ω(n2) Ω(n) Ω(nlgn) Ω(nlgn) Ω(k+n) Ω(n) Space O(1) O(1) O(1) O(n) O(n) O(k+n) O(n) Stable Yes No Yes Yes No Yes Yes In-place Yes Yes Yes No Yes No Online No No Yes No No No No Adaptive Yes No Yes No Yes No Yes Suitable for Sorted list Almost sorted list List with unknown order 0&amp;lt;=A[i]&amp;lt;=k Criteria Explanation Technique: Methodology of the sorting algorithm.</description></item><item><title>Insertion Sort</title><link>https://arshovon.com/blog/insertion-sort/</link><pubDate>Tue, 11 Aug 2020 02:06:33 +0600</pubDate><guid>https://arshovon.com/blog/insertion-sort/</guid><description>Characteristics Simple implementation Insertion sort can be implemented easily with less lines of code. It is quite efficient for small data sets. Though it has same complexity than other quadratic sorting algorithms like selection sort or bubble sort, insertion sort is more efficient.
Adaptive Insertion sort is adaptive. If the input data set is already sorted, the number of steps are reduced.
Online Insertion sort works on the data as it receives it.</description></item><item><title>Counting Sort</title><link>https://arshovon.com/blog/counting-sort/</link><pubDate>Sun, 09 Aug 2020 11:07:32 +0600</pubDate><guid>https://arshovon.com/blog/counting-sort/</guid><description>Characteristics Non negative integers with a known maximum value Counting sort can be applied if the input numbers are in the set {0, 1, .. ,k}, a set of non negative integers with a maximum value k.
No comparisons between elements There are no comparisons between input elements that take place in counting sort. It uses array indexing to determine the relative order of the input numbers. It identifies the relative positions of each input element.</description></item></channel></rss>